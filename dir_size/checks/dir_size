#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +-----------------------------------------------------------------+
# |                                                                 |
# |        (  ___ \     | \    /\|\     /||\     /|( (    /|        |
# |        | (   ) )    |  \  / /| )   ( || )   ( ||  \  ( |        |
# |        | (__/ /     |  (_/ / | |   | || (___) ||   \ | |        |
# |        |  __ (      |   _ (  | |   | ||  ___  || (\ \) |        |
# |        | (  \ \     |  ( \ \ | |   | || (   ) || | \   |        |
# |        | )___) )_   |  /  \ \| (___) || )   ( || )  \  |        |
# |        |/ \___/(_)  |_/    \/(_______)|/     \||/    )_)        |
# |                                                                 |
# | Copyright Bastian Kuhn 2011                mail@bastian-kuhn.de | 
# +-----------------------------------------------------------------+
#
# This file is a check Script for check_mk
# Information about me can be found at http://bastian-kuhn.de
# Information about check_mk at http://mathias-kettner.de/check_mk.
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Example Agent Output
#<<<dir_size>>>
#17516   /tmp/
#626088  /usr/local/

import pprint

factory_settings['dir_size_default_levels'] = {
    'unit': 'KB',
    'warn': None,
    'crit': None,
    }

dir_size_factor = {
    'B': 1,
    'KB': 1024,
    'MB': 1024 * 1024,
    'GB': 1024 * 1024 * 1024,
    'TB': 1024 * 1024 * 1024 * 1024,
}

def inventory_dir_size(checkname,info):
    inventory = []
    for size, path in info:
        inventory.append((path,None))
    return inventory

def check_dir_size(item, params, info):
    if opt_debug:
        pprint.pprint(item)
        pprint.pprint(params)
        pprint.pprint(info)
    unit, warn, crit = params['unit'], params['warn'], params['crit']
    no_warn, no_crit = False, False
    
  
    if warn == None:
        warn = 0
        no_warn = True
    else:
        warn = warn * dir_size_factor[unit]
    if crit == None:
        crit = 0
        no_crit = True
    else:
        crit = crit * dir_size_factor[unit]
 
    for size, path in info:
        if path == item:
            size = saveint(size) * 1024

            perf = [("dir_size","%dB" % size, warn, crit)]
            output = "Folder size: %s (levels at %s / %s)" % (get_bytes_human_readable(size),
                                                              get_bytes_human_readable(warn),
                                                              get_bytes_human_readable(crit))
            if not no_crit and size >= crit:
                return (2, output, perf)
            elif not no_warn and size >= warn:
                return (1, output, perf)
            else:
                return (0, output, perf) 

check_info['dir_size'] = {
    'check_function':          check_dir_size,
    'service_description':     'Size of %s',
    'has_perfdata':            True,
    'inventory_function':      inventory_dir_size,
    'group':                   'dir_size',
    'default_levels_variable': 'dir_size_default_levels',
}
